name: main issuing service machine
keep_memory: true
initial:
  target: WAIT_SESSION_ID
states:
  WAIT_SESSION_ID:
    transitions:
    - trigger:
        data: help
        protocol: basic_message
        rule: INPUT_EQUAL
      sends:
      - data: |-
          ---------------------
          Say: help, and I'll show this message.
          Say: <sessionID>, and I store it, and I'll go the next cmd mode.
        protocol: basic_message
      target: WAIT_SESSION_ID

    - trigger:
        rule: INPUT_SAVE_SESSION_ID
        protocol: basic_message
      sends:
      - data: ACK Your sessionID is {{.SESSION_ID}}. Going on..
        protocol: basic_message
        rule: FORMAT_MEM
      - data: select your role issuer/receiver
        protocol: basic_message
      target: WAIT_ROLE_SELECTION

  WAIT_ROLE_SELECTION:
    transitions:
    - trigger:
        data: issuer
        protocol: basic_message
        rule: INPUT_EQUAL
      sends:
      - data: ACK, next give attr1
        protocol: basic_message
      - data: internal_message
        rule: TRANSIENT
        protocol: transient
      target: WAIT_DATA_AS_ISSUER

    - trigger:
        data: receiver
        protocol: basic_message
        rule: INPUT_EQUAL
      sends:
      - data: ACK, todo rm after test
        protocol: basic_message
      - data: internal_message
        rule: TRANSIENT
        protocol: transient
      target: TR_RECEIVER

    - trigger:
        protocol: basic_message
      sends:
      - data: NACK issuer or receiver are only acceptable roles
        protocol: basic_message
      target: WAIT_ROLE_SELECTION

  TR_RECEIVER:
    transitions:
    - trigger:
        protocol: transient
      sends:
      - data: ACK, receiver
        protocol: basic_message
      - data: receiver_arriwed
        protocol: backend
        rule: FORMAT_MEM
      target: WAIT_DATA_AS_RECEIVER

  WAIT_DATA_AS_RECEIVER: # receiver is a real issuer in this bot
    transitions:
    - trigger:
#       rule: LUA # maybe this isn't needed, we just move one attr at time.
#       data: ${role.lua}
# TODO: we can save one attr at the time here. when ready we can send back the
# whole data needed for issuing or what is the easiest.
        rule: INPUT_SAVE
        data: ATTR1 # now we get purposedly whole line
        protocol: backend
      sends:
      - data: Issue <attr1> is {{.ATTR1}}
        protocol: basic_message # Issuing starts here
        rule: FORMAT_MEM
      target: WAIT_FINAL


      # WAIT_DATA_AS_ISSUER:

  WAIT_DATA_AS_ISSUER:
    transitions:
    - trigger:
        rule: INPUT_SAVE
        data: ATTR1
        protocol: basic_message
      sends:
      - data: ACK Your <attr1> is {{.ATTR1}}, waiting rcvr..
        protocol: basic_message
        rule: FORMAT_MEM
      target: WAIT_RCVR_TO_JOIN_AS_ISSUER

  WAIT_RCVR_TO_JOIN_AS_ISSUER:
    transitions:
    - trigger:
        rule: INPUT_EQUAL
        data: receiver_arriwed
        protocol: backend
      sends:
      - data: Issue <attr1> is {{.ATTR1}}
        protocol: backend
        rule: FORMAT_MEM
      - data: role issuer got receiver_arriwed
        protocol: basic_message
      target: WAIT_FINAL

# todo: no terminate at the final version
#
#  WAIT_FINAL_ACK_AS_ISSUER:
#    terminate: true
#
#  WAIT_FINAL_ACK_AS_RCVR:
#    terminate: true

  WAIT_FINAL:
#   terminate: true # rm because machine behaves weirdly
    transitions:
    - trigger:
        protocol: basic_message
      sends:
      - data: |-
          ---------------------
          Final state
          ---------------------
        protocol: basic_message
      target: WAIT_SESSION_ID
